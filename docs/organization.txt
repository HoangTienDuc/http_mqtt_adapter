# MQTT Adapter Project Structure

The project is organized according to the UML class diagram in diagram.mmd:

```
src/
├── mqtt_adapter/
│   ├── models/                  # Data models
│   │   ├── __init__.py          # Exports all models
│   │   ├── base.py              # BaseModel
│   │   ├── mqtt.py              # MQTT-related models
│   │   └── http.py              # HTTP-related models
│   │
│   ├── protocols/               # MQTT protocol implementations
│   │   ├── __init__.py          # Exports protocol classes
│   │   ├── interface.py         # IMQTTProtocol interface
│   │   ├── base.py              # BaseProtocol and MQTTBrokerRegistry
│   │   └── factory.py           # MQTTProtocolFactory
│   │
│   ├── services/                # Service management
│   │   ├── __init__.py          # Exports service classes
│   │   └── mqtt_service_manager.py # MQTTServiceManager
│   │
│   ├── web/                     # Web server
│   │   ├── __init__.py          # Exports web classes
│   │   └── server.py            # WebServer
│   │
│   ├── config/                  # Configuration
│   │   └── __init__.py          # Configuration loading functions
│   │
│   ├── utils/                   # Utilities
│   │   ├── __init__.py          # Exports utility functions
│   │   └── logging.py           # Logging setup
│   │
│   ├── app.py                   # Main application class
│   └── __init__.py              # Package version and description
│
├── main.py                      # Entry point
│
├── config.yaml                  # Sample configuration
└── requirements.txt             # Dependencies
```

The implementation follows the class diagram with these components:

1. **Models**: Data structures used throughout the application
   - BaseModel: Base class for all models
   - MQTTRequest: Represents an MQTT request
   - MQTTResponse: Represents an MQTT response
   - MQTTBrokerConfig: Configuration for an MQTT broker
   - MQTTAppConfig: Application configuration with multiple brokers
   - HTTPRequest: HTTP request model
   - HTTPResponse: HTTP response model

2. **Protocols**: MQTT communication implementation
   - IMQTTProtocol: Interface for MQTT protocols
   - BaseProtocol: Implementation of the MQTT protocol interface
   - MQTTBrokerRegistry: Registry for managing MQTT protocol instances
   - MQTTProtocolFactory: Factory for creating protocol instances

3. **Services**: Coordination between components
   - MQTTServiceManager: Manages MQTT services and routing

4. **Web**: HTTP server implementation
   - WebServer: HTTP server that adapts to MQTT

5. **Config**: Configuration loading
   - Functions to load configuration from files or environment variables

6. **Utils**: Utility functions
   - Logging setup and other utilities

The application implements a request/response pattern for MQTT communication and
provides an HTTP interface that maps to MQTT operations, allowing seamless
integration between HTTP clients and MQTT-based services.